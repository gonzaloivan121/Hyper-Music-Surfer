using System.Collections;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;

namespace SplineMesh {
    /// <summary>
    /// Example of component to show that the spline is an independant mathematical component and can be used for other purposes than mesh deformation.
    /// 
    /// This component is only for demo purpose and is not intended to be used as-is.
    /// 
    /// We only move an object along the spline. Imagine a camera route, a ship patrol...
    /// </summary>
    [ExecuteInEditMode]
    [RequireComponent(typeof(Spline))]
    public class ExampleFollowSpline : MonoBehaviour {
        private GameObject generated;
        private Spline spline;
        private float rate = 0;
        private float speed;

        public GameObject Follower;

        public float minSpeed;
        public float maxSpeed;

        private void OnEnable() {
            rate = 0;
            //string generatedName = "generated by " + GetType().Name;
            string generatedName = "Player";
            var generatedTranform = transform.Find(generatedName);
            generated = generatedTranform != null ? generatedTranform.gameObject : Instantiate(Follower, gameObject.transform);
            generated.name = generatedName;

            spline = GetComponent<Spline>();
            speed = minSpeed;
/*#if UNITY_EDITOR
            EditorApplication.update += EditorUpdate;
#endif*/
        }

        void OnDisable() {
/*#if UNITY_EDITOR
            EditorApplication.update -= EditorUpdate;
#endif*/
        }

        void Update() {
#if UNITY_STANDALONE || UNITY_ANDROID || UNITY_IOS
            EditorUpdate();
#endif
        }

        void EditorUpdate() {
            if (speed < maxSpeed) {
                speed += Time.deltaTime;
            }
            rate += Time.deltaTime * (speed / 4 / 100f);
            if (rate > spline.nodes.Count - 1) {
                rate -= spline.nodes.Count - 1;
            }
            PlaceFollower();
        }

        private void PlaceFollower() {
            if (generated != null) {
                CurveSample sample = spline.GetSample(rate);
                generated.transform.localPosition = sample.location;
                generated.transform.localRotation = sample.Rotation;
            }
        }
    }
}
